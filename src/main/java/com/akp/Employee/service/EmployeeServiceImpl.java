package com.akp.Employee.service;import com.akp.Employee.entity.Employee;import com.akp.Employee.error.EmployeeNotFoundException;import com.akp.Employee.repository.EmployeeRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;import java.util.Objects;import java.util.Optional;@Servicepublic class EmployeeServiceImpl implements EmployeeService{    @Autowired    private EmployeeRepository employeeRepository;    //save employee in the database    @Override    public Employee saveEmployee(Employee employee) {        return employeeRepository.save(employee);    }    //fetch all the employee from the database    @Override    public List<Employee> getAllEmployee() {        return employeeRepository.findAll();    }    //get the employee details on the basis of id    @Override    public Employee getEmployee(int id) {        Integer idInt = Integer.valueOf(id);        List<Employee> employeeList = new ArrayList<>();        return employeeRepository.findById(idInt).stream()                .findAny().orElseThrow(                        () -> new EmployeeNotFoundException("Employee with id is not present..", "EMPLOYEE_NOT_FOUND"));    }    //update the employee on the basis of id    @Override    public Employee updateEmployee(Employee employee, int id) {        Employee emp = employeeRepository.findById(id).get();        if(Objects.isNull(emp.getEmpId())){            throw new EmployeeNotFoundException("Employee is not present in the database", "EMPLOYEE_NOT_FOUND");        }        emp.setEmpName(employee.getEmpName());        emp.setEmpAge(employee.getEmpAge());        emp.setDepartment(employee.getDepartment());        return employeeRepository.save(emp);    }    //delete the employee on the basis of id    @Override    public Long deleteEmployee(int id) {        Optional<Employee> employee = employeeRepository.findById(id);        if(!employee.isPresent()){            throw new EmployeeNotFoundException("Employee is not present in the database", "EMPLOYEE_NOT_FOUND");        }        employeeRepository.deleteById(id);        return Long.valueOf(id);    }}